<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>洛谷P13554题解</title>
    <link href="/2025/08/03/%E6%B4%9B%E8%B0%B7P13554%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/08/03/%E6%B4%9B%E8%B0%B7P13554%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题意：小 C 要给小 G 买至少 $a$ 个奶龙玩偶，玩偶原价是每个 $x$ 元。不过有个促销活动：如果单次买满 $y$ 个，每个的单价就降到 $z$ 元，其中 $z \le x$。我们需要算出小 C 最少要花多少钱。</p><p>要找到最少花费，得考虑两种可能的购买方案，然后选便宜的那个：</p><ol><li><p>不凑促销：直接买刚好 $a$ 个，按原价 $x$ 算，花费是 $a \times x$。</p></li><li><p>凑促销：如果买的数量 $a$ 已经达到或超过 $y$，那就按促销价 $z$ 买 $a$ 个，花费是 $a$ 乘以 $z$；如果 $a$ 比 $y$ 少，那就得买 $y$ 个才能触发促销，花费是 $y \times z$。</p></li></ol><p>最后比较这两种方案的花费，选较小的那个就是答案。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x, y, z, a;<br>    cin &gt;&gt; x &gt;&gt; y &gt;&gt; z &gt;&gt; a;<br>    <span class="hljs-type">int</span> p1 = a * x, p2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//p1：方案1，不凑促销，按原价买 a 个的花费</span><br>    <span class="hljs-comment">//p2：方案2，凑促销的花费</span><br>    <span class="hljs-keyword">if</span> (a &gt;= y) p2 = a * z;<br>    <span class="hljs-keyword">else</span> p2 = y * z;<br>    cout &lt;&lt; <span class="hljs-built_in">min</span>(p1, p2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>梦熊比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P8591题解</title>
    <link href="/2025/07/28/%E6%B4%9B%E8%B0%B7P8591%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/28/%E6%B4%9B%E8%B0%B7P8591%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://www.luogu.com.cn/problem/P8591">https://www.luogu.com.cn/problem/P8591</a>。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题意：给定 $n$ 条线段，需将每条线段染成红色或黑色。要求红色线段互不相交，且每条黑色线段至少与一条红色线段相交。目标是最小化红色线段的总长度和。</p><p>这道题的核心是选择合适的红色线段，既要保证它们互不相交，又要能 “覆盖” 所有黑色线段。也就是，所有未被选作红色的线段必须与至少一条红色线段相交，而红色线段之间不能有交集。</p><p>先将所有线段按左端点从小到大排序，便于后续的处理。</p><p>设 $f_i$ 表示前 $i$ 条线段中，第 $i$ 条线段为红色时的最小总长度和。</p><p>对于第 $i$ 条线段，寻找之前的红色线段 $j$ 并且 $j &lt; i$，要求 $i$ 和 $j$ 不相交（满足 $l_i$ &gt; $r_j$），且 $j$ 能覆盖中间可能存在的黑色线段。可以维护一个最大值 Max 来确保中间线段能被有效覆盖，这样更新 $f_i$ 的最小值。</p><p>最后在所有可能作为最后一条红色线段的 $f_i$ 中取最小值，该红色线段需能覆盖最后一条线段（如果最后一条是黑色）。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br><span class="hljs-type">int</span> l, r;<br>&#125; a[<span class="hljs-number">3005</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a, node b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a.l &lt; b.l;<br>&#125;<br><span class="hljs-type">int</span> f[<span class="hljs-number">3005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i].l &gt;&gt; a[i].r;<br><span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>, cmp);<br><span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f3f3f3f</span>, <span class="hljs-built_in">sizeof</span>(f));<span class="hljs-comment">//将数组的每一项设为一个较大的数</span><br>f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>a[<span class="hljs-number">0</span>].r = <span class="hljs-number">-1e9</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-type">int</span> Max = <span class="hljs-number">-1e9</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br><span class="hljs-keyword">if</span>(a[i].l &lt;= a[j].r || a[j].r &lt; Max) <span class="hljs-keyword">continue</span>;<br>Max = <span class="hljs-built_in">max</span>(Max, a[j].l);<br>f[i] = <span class="hljs-built_in">min</span>(f[i], f[j] + a[i].r - a[i].l);<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br><span class="hljs-keyword">if</span>(a[i].r &gt;= a[n].l) ans = <span class="hljs-built_in">min</span>(ans, f[i]);<br>&#125;<br>cout &lt;&lt; ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P13491题解</title>
    <link href="/2025/07/26/%E6%B4%9B%E8%B0%B7P13491%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/26/%E6%B4%9B%E8%B0%B7P13491%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题意：要求判断能否将字符串 $S$ 分割成若干连续子串，然后通过重新排列这些子串的顺序，使其与字符串 $T$ 完全相同。两个字符串长度均为 $n$，且只包含小写英文字母。</p><p>这道题的关键在于：如果 $S$ 能通过分割重组得到 $T$，那么 $S$ 和 $T$ 必须包含完全相同的字符（包括每个字符的数量）。</p><p>因为，如果两个字符串包含的字符种类或数量不同，无论如何分割重组都不可能让它们相等，并且，如果两个字符串字符组成完全相同，我们总可以通过适当的分割方式（比如每个字符作为一个子串）来重组得到目标字符串。</p><p>因此，我们只需要检查 $S$ 和 $T$ 的字符计数是否完全一致即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> cnt[<span class="hljs-number">26</span>] = &#123;<span class="hljs-number">0</span>&#125;;  <span class="hljs-comment">// 用于计数每个字母的出现次数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    string s, t;<br>    cin &gt;&gt; n &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-comment">// 统计S中每个字符的出现次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cnt[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    <span class="hljs-comment">// 减去T中每个字符的出现次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cnt[t[i] - <span class="hljs-string">&#x27;a&#x27;</span>]--;<br>    <span class="hljs-comment">// 检查所有字符的计数是否都为0</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (cnt[i] != <span class="hljs-number">0</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>梦熊比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P2415题解</title>
    <link href="/2025/07/24/%E6%B4%9B%E8%B0%B7P2415%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/24/%E6%B4%9B%E8%B0%B7P2415%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题意：给定一个包含不超过 $30$ 个元素的集合，求所有子集的元素之和。例如，集合 ${2,3}$ 的所有子集为 $\varnothing, { 2 }, { 3 }, { 2, 3 }$，其元素和为 $2+3+2+3&#x3D;10$。</p><p>通过观察可以发现，每个元素在所有子集中出现的次数是相同的。</p><p>对于一个大小为 $n$ 的集合，每个元素出现的次数为 $2^{n-1}$。例如，集合 ${2,3}$ 中，元素 $2$ 和 $3$ 各出现 $2$ 次 $2^{2-1}&#x3D;2$。</p><p>所以所有子集的元素之和为 $\left( \sum_{i&#x3D;1}^{n} a_i \right) \times 2^{n-1}$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">30</span>];<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>, sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; a[cnt]) &#123;<br>sum += a[cnt];<br>cnt++;<br>&#125;<br><span class="hljs-type">int</span> mul = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; cnt; i++) mul *= <span class="hljs-number">2</span>;<br>cout &lt;&lt; sum * mul;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P13190题解</title>
    <link href="/2025/07/21/%E6%B4%9B%E8%B0%B7P13190%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/21/%E6%B4%9B%E8%B0%B7P13190%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://www.luogu.com.cn/problem/P13190">https://www.luogu.com.cn/problem/P13190</a>。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题意：给定一个 $N \times N$ 的网格，每行和每列的士兵身高严格递增。现在丢失了一行或一列，剩下 $2 \times N-1$ 个列表。要求找出缺失的那一行或列。</p><p>首先我们可以统计所有数字的出现次数（每个数字在行列中出现的总次数应该是偶数，除非它属于缺失的那一行或一列）。</p><p>然后筛选奇数次出现的数字（缺失的行或列中的每个数字出现次数为奇数）。</p><p>最后排序输出（将这些数字排序后即为缺失的行或列）。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> cnt[<span class="hljs-number">2505</span>];<span class="hljs-comment">// 统计每个身高的出现次数</span><br><span class="hljs-type">int</span> m[<span class="hljs-number">55</span>];<span class="hljs-comment">// 存储缺失的行/列</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> t;<br>cin &gt;&gt; t;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c = <span class="hljs-number">1</span>; c &lt;= t; c++) &#123;<span class="hljs-comment">//用于输出行号</span><br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-built_in">memset</span>(cnt, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(cnt));<span class="hljs-comment">//清空</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * n - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br>cnt[x]++;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 收集出现奇数次的身高</span><br><span class="hljs-built_in">memset</span>(m, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(m));<span class="hljs-comment">//清空</span><br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">2505</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (cnt[i] % <span class="hljs-number">2</span>) m[k++] = i;<br>&#125;<br><span class="hljs-built_in">sort</span>(m, m + k);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d:&quot;</span>, c);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, m[i]);<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项：</p><ol><li><p>不要学我把 <code>cin</code>，<code>cout</code> 和 <code>scanf</code>，<code>printf</code> 混用，虽然这样你可能也会 A 了这道题，但这也是不好的习惯。</p></li><li><p>因为有 $T$ 组测试用例，所以每次处理要清空。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Google Code Jam</tag>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P5741题解</title>
    <link href="/2025/07/11/%E6%B4%9B%E8%B0%B7P5741%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/11/%E6%B4%9B%E8%B0%B7P5741%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题目大意：给定 $N$ 名学生的姓名和三门科目成绩，找出所有 “旗鼓相当的对手”，即两学生每科分数差不超过 $5$ 且总分差不超过 $10$。输出需按字典序排列所有符合条件的学生对。</p><p>这道题我们可以使用结构体存储学生信息（姓名、各科成绩、总分）。</p><p>然后遍历所有可能的学生对，检查每科分差和总分差是否符合要求，这里可以使用绝对值函数来取差。</p><p>最后将符合条件的学生对按字典序排序后输出。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node1</span> &#123;<span class="hljs-comment">//学生基本信息</span><br>string name;<br><span class="hljs-type">int</span> c, m, e, sum;<br><span class="hljs-comment">//c:语文成绩</span><br><span class="hljs-comment">//m:数学成绩</span><br><span class="hljs-comment">//e:英语成绩</span><br>&#125;stu[<span class="hljs-number">1000</span>];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node2</span> &#123;<span class="hljs-comment">//用两个字符串模拟字典序</span><br>string a, b;<br>&#125;ans[<span class="hljs-number">500000</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(string x, string y)</span> </span>&#123;<span class="hljs-comment">//字典序比较</span><br><span class="hljs-keyword">return</span> x &lt; y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp2</span><span class="hljs-params">(node2 x, node2 y)</span> </span>&#123;<span class="hljs-comment">//排序学生对</span><br><span class="hljs-keyword">if</span> (x.a != y.a) <span class="hljs-keyword">return</span> x.a &lt; y.a;<br><span class="hljs-keyword">return</span> x.b &lt; y.b;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; stu[i].name &gt;&gt; stu[i].c &gt;&gt; stu[i].m &gt;&gt; stu[i].e;<br>stu[i].sum = stu[i].c + stu[i].m + stu[i].e;<br>&#125; <br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(stu[i].c - stu[j].c) &lt;= <span class="hljs-number">5</span> &amp;&amp; <span class="hljs-built_in">abs</span>(stu[i].m - stu[j].m) &lt;= <span class="hljs-number">5</span> &amp;&amp; <span class="hljs-built_in">abs</span>(stu[i].e - stu[j].e) &lt;= <span class="hljs-number">5</span> &amp;&amp; <span class="hljs-built_in">abs</span>(stu[i].sum - stu[j].sum) &lt;= <span class="hljs-number">10</span>) &#123;<span class="hljs-comment">//abs是绝对值函数，会将参数取绝对值</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">cmp1</span>(stu[i].name, stu[j].name)) &#123;<br>ans[cnt] = &#123;stu[i].name, stu[j].name&#125;;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ans[cnt] = &#123;stu[j].name, stu[i].name&#125;;<br>&#125;<br>cnt++;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">sort</span>(ans, ans + cnt, cmp2);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++) &#123;<br>cout &lt;&lt; ans[i].a &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; ans[i].b &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P13013题解</title>
    <link href="/2025/07/08/%E6%B4%9B%E8%B0%B7P13013%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/08/%E6%B4%9B%E8%B0%B7P13013%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题目要求我们计算在给定两种优秀券的数量限制下，最多可以兑换多少份奖品。兑换规则有两种方式：</p><ol><li><p>使用 $a$ 张课堂券和 $b$ 张作业券。</p></li><li><p>使用 $b$ 张课堂券和 $a$ 张作业券。</p></li></ol><p>首先我们确保 $a \le b$，处理会更加方便，也就是说当 $a &gt; b$ 时需要交换 $a$ 和 $b$。</p><p>当 $a &#x3D; b$ 时，兑换方式只有一种，直接取两种券数量的较小值除以 $a$ 即可。</p><p>对于 $a \neq b$ 情况，我们使用二分查找来确定最大兑换份数 $\operatorname{mid}$。</p><p>对于 $\operatorname{mid}$，我们需要满足：</p><ol><li><p>每种券至少能提供 $a \times \operatorname{mid}$ 张。</p></li><li><p>剩余券的数量能够满足另一种兑换方式的需求。</p></li></ol><p>所以得出条件：</p><p>$$<br>\operatorname{mid} \le (n - a \times \operatorname{mid}) &#x2F; (b - a) + (m - a \times \operatorname{mid}) &#x2F; (b - a)<br>$$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> n, m, a, b; <span class="hljs-comment">//一定要开 long long</span><br>cin &gt;&gt; n &gt;&gt; m &gt;&gt; a &gt;&gt; b;<br><span class="hljs-keyword">if</span> (a &gt; b) <span class="hljs-built_in">swap</span>(a, b); <br><span class="hljs-keyword">if</span> (a == b) &#123;<br>cout &lt;&lt; <span class="hljs-built_in">min</span>(n, m) / a;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">while</span> (l &lt; r) &#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> mid = (l + r + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (n &lt; a * mid || m &lt; a * mid || (n - a * mid) / (b - a) + (m - a * mid) / (b - a) &lt; mid) r = mid - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> l = mid;<br>&#125;<br>cout &lt;&lt; l;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GESP</tag>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P8687题解</title>
    <link href="/2025/07/05/%E6%B4%9B%E8%B0%B7P8687%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/05/%E6%B4%9B%E8%B0%B7P8687%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>本题考虑使用状压 DP。</p><p>设糖果口味总数为 $m$，使用二进制数 $s \in {0, 1}^m$ 表示口味集合，其中第 $k$ 位为 $1$ 当且仅当该集合包含第 $k$ 种口味。</p><p>定义状态 $f(s)$ 为覆盖口味集合 $s$ 所需的最小糖果包数。初始条件为：</p><ul><li><p>$f(\emptyset) &#x3D; 0$（空集不需要任何糖果包）</p></li><li><p>$f(s) &#x3D; +\infty$（对于所有非空集合 $s$）</p></li></ul><p>状态转移方程：</p><p>对于每包糖果的口味集合 $a_i$（$1 \leq i \leq n$），遍历所有可能的状态 $s$，更新：</p><p>$$<br>f(s \cup a_i) &#x3D; \min(f(s \cup a_i), f(s) + 1)<br>$$</p><p>可以得到如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f3f3f3f</span>, <span class="hljs-built_in">sizeof</span>(f));<br>f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>; s &lt; <span class="hljs-number">1</span> &lt;&lt; m; s++) &#123;<br>        <span class="hljs-keyword">if</span> (f[s] &gt; <span class="hljs-number">105</span>) <span class="hljs-keyword">continue</span>;<br>        f[s | a[i]] = <span class="hljs-built_in">min</span>(f[s | a[i]], f[s] + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码就不给了，希望这篇题解对你有所帮助。</p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>位运算</tag>
      
      <tag>DP</tag>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P12972题解</title>
    <link href="/2025/07/03/%E6%B4%9B%E8%B0%B7P12972%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/03/%E6%B4%9B%E8%B0%B7P12972%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://www.luogu.com.cn/problem/P12972">https://www.luogu.com.cn/problem/P12972</a>。</p><hr><p>如果这道题你去看简易题面，你成功的被套进去了。</p><p>我们化简精力计算公式，可以得到：</p><p>$$<br>(k \operatorname{and} a_j)+(k \operatorname{xor} a_j)−k&#x3D;a_j<br>$$</p><p>因此，每轮的总精力消耗为该轮中所有饮料重量的按位或。</p><p>为了最小化总和，应让每轮的按位或尽可能小。</p><p>所以最终结论就是：</p><p>所有饮料的按位或之和的最小值，等于所有饮料重量的按位或结果。</p><p>按上面的思路可以写出以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, x, ans = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; x;<br>        ans |= x;<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>but，你会发现只会得到 $20$，注意观察数据范围，$0\leq a_i \leq 2^{63}-1$，这已经超出了 int 类型的存储范围，所以需要使用 long long 类型存储。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, x, ans = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; x;<br>        ans |= x;<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心</tag>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P5662题解</title>
    <link href="/2025/07/01/%E6%B4%9B%E8%B0%B7P5662%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/01/%E6%B4%9B%E8%B0%B7P5662%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>原题链接：<a href="https://www.luogu.com.cn/problem/P5662">https://www.luogu.com.cn/problem/P5662</a>。</p><p>更好的使用方式：<a href="https://www.luogu.com.cn/article/sxhfnpo8">https://www.luogu.com.cn/article/sxhfnpo8</a>。</p><p><strong>警告：严禁抄袭</strong>。</p><hr><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题已知 $N$ 件物品未来 $T$ 天的价格，需要通过交易来让手中的 $M$ 没金币尽可能变多，并且交易不限次数且没有手续费。</p><p>先看数据范围：</p><p>对于 $T &#x3D; 1$ 的 $10$ 分，因为只有一天，所以每件物品只有一件价格，无论进行多少次买卖，钱都不会变多。因此 $T &#x3D; 1$ 时直接输出 $M$ 即可。</p><p>对于 $N &#x3D; 1$ 的 $15$ 分，只有一件商品，那么只要明天比今天贵，今天应该能买多上就买多少。因为明天可以直接全部卖掉，这样就实现了赚钱最大化，然后再考虑明天是否重新买回。</p><p>由 $N &#x3D; 1$ 的结论进一步总结得出，对于每一天的每件物品，就是使用当前的价格赚取今明两天的差价。之实际上是一个完全背包问题的模型，每天都是一轮完全背包问题。每一天手中的金币为背包的体积，每件物品的体积就是物品当天的价格，每件物品的价值就是当天与次日的价格差，这样做一次完全背包就能计算出来每天最多能赚多少钱。程序的时间复杂度是 $O(NMT)$。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> t, n, m;<br><span class="hljs-type">int</span> a[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<span class="hljs-comment">//a[i][j]：第i天，j号物品的价格</span><br><span class="hljs-type">int</span> f[<span class="hljs-number">10005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin &gt;&gt; t &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; t; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>cin &gt;&gt; a[i][j];<br>&#125;<br>&#125;<br><span class="hljs-comment">//一天一天做，比较今天与明天</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; t - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(f));<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br><span class="hljs-keyword">if</span> (a[i + <span class="hljs-number">1</span>][j] &gt; a[i][j]) &#123;<br><span class="hljs-comment">//体积：a[i][j],价值：a[i + 1][j] - a[i][j]</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = a[i][j]; k &lt;= m; k++) &#123;<br>f[k] = <span class="hljs-built_in">max</span>(f[k], f[k - a[i][j]] + a[i + <span class="hljs-number">1</span>][j] - a[i][j]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//每一件物品考虑完后，f[m]即m元最多赚的钱</span><br>m += f[m];<br>&#125;<br>cout &lt;&lt; m;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>AC记录：<a href="https://www.luogu.com.cn/record/196364812">https://www.luogu.com.cn/record/196364812</a>。</p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSP-J</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P5663题解</title>
    <link href="/2025/07/01/%E6%B4%9B%E8%B0%B7P5663%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/01/%E6%B4%9B%E8%B0%B7P5663%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>原题链接：<a href="https://www.luogu.com.cn/problem/P5663">https://www.luogu.com.cn/problem/P5663</a>。</p><p>更好的使用方式：<a href="https://www.luogu.com.cn/article/0o6pvn64">https://www.luogu.com.cn/article/0o6pvn64</a>。</p><p><strong>警告：严禁抄袭</strong>。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>此题是一道图论的题目，可以将每个工人看成一个点，将双向的零件传送带看作无向边。</p><p>只管的做法是按照题目的描述规则，使用递归直接模拟，这样可以通过前 $8$ 个测试点，得到 $40$ 分。对于满分做法，需要观察这个无向图本身的性质，容易发现 $x$ 号点生产一个 $L$ 阶段零件时，如果能找到一条从 $x$ 号点到 $1$ 号点提供原材料。</p><p>通过样例 $2$ 的情况，我们发现 $3$ 号点到 $1$ 号点有两条简单的路径，$3\to2\to1$ 与 $3\to4\to5\to1$。那么，如果 $3$ 号点想生产第一阶段的零件，因为两条简单路径的最短长度是 $2$，因此至少要生产第 $2$ 阶段的零件才能到达 $1$ 号点。此外，所有大于 $2$ 的偶数阶段也都是需要 $1$ 号点给材料的，因此会有 $3\to2\to1\cdots\to2\to1$ 这样的方式使得 $1$ 号点提供原材料，因为可以通过 $3\to4\to5\to1\cdots\to5\to1$ 的方式到达一号点。</p><p>由此可得，只需预处理出 $1$ 号点到其他所有点的最短奇数路径和最短偶数路径的长度。当 $x$ 号点生产一个 $L$ 阶段的零件时，如果 $L$ 是奇数且 $L$ 大于等于 $x$ 号点到 $1$ 号点的最短奇数路径长度，就需要 $1$ 号点生产原材料。如果 $L$ 是偶数且 $L$ 大于等于 $x$ 号点到 $1$ 号点的最短偶数路径长度，就需要 $1$ 号点生产原材料。</p><h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n, m, Q;<br><span class="hljs-comment">//g[i] 存储所有与i相连的点</span><br>vector&lt;<span class="hljs-type">int</span>&gt; g[<span class="hljs-number">100005</span>];<br><span class="hljs-comment">//odd[i]:从1到i的最短奇数路径的长度</span><br><span class="hljs-comment">//even[i]:从1到i的最短偶数数路径的长度</span><br><span class="hljs-type">int</span> odd[<span class="hljs-number">100005</span>], even[<span class="hljs-number">100005</span>];<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin &gt;&gt; n &gt;&gt; m &gt;&gt; Q;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= m;i++)&#123;<br><span class="hljs-type">int</span> u, v;<br>cin &gt;&gt; u &gt;&gt; v;<br>g[u].<span class="hljs-built_in">push_back</span>(v);<br>g[v].<span class="hljs-built_in">push_back</span>(u);<br>&#125;<br><span class="hljs-built_in">memset</span>(odd, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(odd));<br><span class="hljs-built_in">memset</span>(even, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(even));<br>even[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br><span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; g[u].<span class="hljs-built_in">size</span>();i++)&#123;<br><span class="hljs-type">int</span> v = g[u][i];<br><span class="hljs-comment">//u-&gt;i</span><br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<span class="hljs-comment">// 是否有优化</span><br><span class="hljs-keyword">if</span>(odd[u] + <span class="hljs-number">1</span> &lt; even[v])&#123;<br>even[v] = odd[u] + <span class="hljs-number">1</span>;<br>flag = <span class="hljs-literal">true</span>;<br>&#125; <br><span class="hljs-keyword">if</span>(even[u] + <span class="hljs-number">1</span> &lt; odd[v])&#123;<br>odd[v] = even[u] + <span class="hljs-number">1</span>;<br>flag = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(flag) <br>q.<span class="hljs-built_in">push</span>(v);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= Q;i++)&#123;<br><span class="hljs-type">int</span> a, L;<br>cin &gt;&gt; a &gt;&gt; L;<br><span class="hljs-keyword">if</span>(L % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &amp;&amp; even[a] &lt;= L)<br>cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(L % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &amp;&amp; odd[a] &lt;= L)<br>cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>AC 记录：<a href="https://www.luogu.com.cn/record/197005888">https://www.luogu.com.cn/record/197005888</a>。</p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSP-J</tag>
      
      <tag>最短路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>继续浏览 Greasy Fork 的方法</title>
    <link href="/2025/07/01/%E7%BB%A7%E7%BB%AD%E6%B5%8F%E8%A7%88-Greasy-Fork-%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2025/07/01/%E7%BB%A7%E7%BB%AD%E6%B5%8F%E8%A7%88-Greasy-Fork-%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>众所周知，Greasy Fork 是强大的油猴脚本库，而现在已经变成了这样：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/4um55sx1.png"></p><hr><h2 id="解决问题的办法"><a href="#解决问题的办法" class="headerlink" title="解决问题的办法"></a>解决问题的办法</h2><p>使用镜像，常用镜像有：</p><ol><li><p><a href="https://greasyfork.cc/">https://greasyfork.cc</a>。</p></li><li><p><a href="https://gf.qytechs.cn/">https://gf.qytechs.cn</a>。</p></li><li><p><a href="https://greasyfork.cloud/">https://greasyfork.cloud</a>。</p></li></ol><p>如要使用，直接把 greasyfork.org 改为上面的镜像即可。</p><p><strong>注意：这些镜像站随时失效，如失效可以考虑使用 <code>脚本猫</code></strong>。</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p>推荐链接 1：<a href="https://www.luogu.com.cn/article/fg0zfzpy">Luogu 优化插件</a>。</p><p>推荐链接 2：<a href="https://www.luogu.com.cn/article/p2ri0gub">油猴插件 LG &amp; AT &amp; CF</a>。</p><p>推荐链接 3：<a href="https://www.luogu.com.cn/article/dqyc4vbg">分享一些神奇的好用的拓展&amp;脚本【精选版】</a>。</p><p>推荐链接 4：<a href="https://www.luogu.com.cn/article/lj91a3c8">Tampermonkey 优化插件</a>。</p>]]></content>
    
    
    <categories>
      
      <category>科技·工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VScode 配置 C/C++ 环境</title>
    <link href="/2025/07/01/VScode-%E9%85%8D%E7%BD%AE-C-C-%E7%8E%AF%E5%A2%83/"/>
    <url>/2025/07/01/VScode-%E9%85%8D%E7%BD%AE-C-C-%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>众所周知，VScode 是一款非常强大的代码&#x2F;文本编辑器。至于它为什么强大请看下图。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ttrdt8hs.png"></p><h2 id="卸载-vscode（第一次安装的请跳过）"><a href="#卸载-vscode（第一次安装的请跳过）" class="headerlink" title="卸载 vscode（第一次安装的请跳过）"></a>卸载 vscode（第一次安装的请跳过）</h2><p><strong>注意：网上有些配置教程是错误的，如果你配错了，那么请你按以下步骤彻底卸载。</strong></p><ol><li>第一步找到 vscode 安装路径，双击运行 <code>unins000.exe</code> 卸载 vscode。</li></ol><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/84u1975r.png"></p><ol start="2"><li>来到 <code>C:\Users\admin\AppData\Roaming</code> 其中 <code>admin</code> 是你系统用户名，删除 <code>Code</code>文件夹。</li></ol><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/jurgg2th.png"></p><ol start="3"><li>来到 <code>C:\Users\admin</code> 同样 <code>admin</code> 是你系统用户名。删除 <code>.vscode</code> 文件夹。</li></ol><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/daq2brd6.png"></p><p>恭喜，你完成了第一步卸载 vscode。</p><h2 id="安装-vscode"><a href="#安装-vscode" class="headerlink" title="安装 vscode"></a>安装 vscode</h2><p>这里给出 vscode 官方下载地址：<a href="https://code.visualstudio.com/download">https://code.visualstudio.com/download</a>。</p><p>选择合适的系统安装即可。</p><p>安装过程我就不再赘述了。</p><h2 id="安装-C-C-编译器"><a href="#安装-C-C-编译器" class="headerlink" title="安装 C&#x2F;C++ 编译器"></a>安装 C&#x2F;C++ 编译器</h2><p>这里给出 Mingw64 官方下载地址：<a href="https://www.mingw-w64.org/source/">https://www.mingw-w64.org/source/</a>。</p><p>下载后放在 D 盘方便我们后面的处理。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/pqtnd0cy.png"></p><p>这一步非常重要请看仔细了。右键<code>此电脑</code>，点击<code>属性</code>，点击<code>高级系统设置</code>，点击<code>环境变量</code>，双击系统变量中的 <code>Path</code>，点击<code>新建</code>，将 <code>D:\mingw64\bin</code>（就是 mingw64 中的 <code>bin</code> 文件夹的路径） 粘进去。保存点三个<code>确定</code>即可。（也可以参照下图）。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/mx0b7scp.png"></p><p><code>win+r</code> 输入 <code>cmd</code> 依次输入 <code>g++ -v</code>，<code>gcc -v</code>，<code>gdb -v</code>，看是否报错，如出现 <code>...不是内部或外部命令，也不是可运行的程序或批处理文件。</code>那就是你配置有误，请重新配置。</p><h2 id="配置-vscode"><a href="#配置-vscode" class="headerlink" title="配置 vscode"></a>配置 vscode</h2><p><code>ctrl+shift+x</code> 打开扩展，搜索 <code>C/C++</code> 扩展并安装。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/m1u6bmiy.png"></p><p>然后打开一个文件夹（<strong>文件夹和内部文件名不得包含中文或全角符号否则报错</strong>），新建一个 cpp 文件，敲出一个 <code>hello world</code>，如果你使用万能头报错，那是正常的，配置后就不报错了。</p><p>单击菜单栏上的 <code>Terminal(终端)-&gt;Configure Default Build Task</code> 。随后在跳出的选择方框中点击 <strong><code>C/C++: g++.exe build active file</code></strong> 以<strong>编译 <code>helloworld.cpp</code></strong> 并创建<strong>可执行文件 <code>helloworld.exe</code></strong>。</p><p>这样，我们会发现在左侧的文件夹栏目中出现了 <code>.vscode</code> 文件夹，其中含有 <strong><code>tasks.json</code></strong> 文件，我们打开该文件，并输入如下代码（里面需要修改的地方我写注释里了）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppbuild&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C/C++: g++.exe 生成活动文件&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:\\mingw64\\bin\\g++.exe&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//这里改成输入你的 g++.exe 路径</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-fdiagnostics-color=always&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;fileDirname&#125;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$gcc&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;detail&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;调试器生成的任务。&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>接下来，我们进一步进行配置。该配置是针对于程序运行的，点击 <strong><code>Run（运行）-&gt;Add Configuration（添加配置）</code></strong>，这样会在 <code>.vscode</code> 文件夹中生成 <strong><code>launch.json</code></strong> 文件，我们打开并输入如下代码（里面需要修改的地方我写注释里了）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;(gdb) 启动&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:/mingw64/bin/gdb.exe&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//这里改成输入你的 gdb.exe 路径</span><br>        <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;为 gdb 启用整齐打印&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;将反汇编风格设置为 Intel&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C/C++: g++.exe 生成活动文件&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>接下来，我们进行最后一项的配置。该配置时针对于C&#x2F;C++的相关拓展的，我们首先按下 <code>Ctrl+Shift+P</code> 以打开全局搜索，输入C&#x2F;C++并在搜索结果中选择 <code>C/C++: Edit configurations(UI)</code></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/f6ufwg94.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/qxwyi2e1.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/mhu47lbx.png"></p><p>ok,现在你可以发现 <code>.vscode</code> 文件夹中不知不觉有了一个 <code>c_cpp_properties.json</code> 。</p><p>现在 vscode 就配置完成了，<code>Ctrl + F5</code> (运行) 刚才写的 <code>helloworld.cpp</code> 如果下方弹出一个框，过一会，你看到了 <code>hello world</code>出现那就说明你配置成功了。你还可以打上断点按下 <code>F5</code> 再按下 <code>ctrl+shift+d</code> 你就可以在旁边看到调试信息了。</p><h2 id="推荐的扩展"><a href="#推荐的扩展" class="headerlink" title="推荐的扩展"></a>推荐的扩展</h2><ol><li><p>Code Runner</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ryheyjnf.png"></p><p>一键运行代码。安装后按下 <code>ctrl+alt+n</code> 即可运行代码。</p></li><li><p>Markdown All in One</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/l7bc532e.png"></p><p>它集成了一些 <code>Markdown</code> 和 <code>LaTeX</code> 的一些函数或公式。</p></li></ol><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ol><li><p><a href="https://www.luogu.com.cn/article/wm6a900g">Markdown+LaTeX+C++| VS Code 搭建高效学习环境</a>。</p></li><li><p><a href="https://www.luogu.com.cn/article/m3oxrdoc">VSCode中那些超棒的功能和插件</a>。</p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><p><a href="https://blog.csdn.net/qq_50813669/article/details/124461328">https://blog.csdn.net/qq_50813669/article/details/124461328</a> ——CSDN。</p></li><li><p><a href="https://code.visualstudio.com/docs/cpp/config-mingw">https://code.visualstudio.com/docs/cpp/config-mingw</a> ——vscode官方文档。</p></li></ol><hr><p>注：文章有些图片是直接导入的别人的，如图片失效，请谅解，也可以在评论区反馈。</p>]]></content>
    
    
    <categories>
      
      <category>科技·工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 搭建个人博客</title>
    <link href="/2025/07/01/hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/07/01/hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="基本环境准备"><a href="#基本环境准备" class="headerlink" title="基本环境准备"></a>基本环境准备</h2><ol><li><p>Git 安装地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a>，选择你合适的系统安装即可。</p></li><li><p>Nodejs 安装地址：<a href="https://nodejs.org/">https://nodejs.org</a>。</p></li></ol><p>有一点要注意的是 Git 安装时如果不知道每一步是什么意思，最好不要改默认设置，一定要添加到 Path，nodejs 也是要添加到 Path。</p><ol start="3"><li>在 GitHub 上注册一个账号，会点英语的人应该都会，这里就不再过多赘述。</li></ol><h2 id="在-GitHub-创建个人仓库"><a href="#在-GitHub-创建个人仓库" class="headerlink" title="在 GitHub 创建个人仓库"></a>在 GitHub 创建个人仓库</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/lnzhis8d.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/2241yaz0.png"></p><p>信息填好后点击 <code>Create repository</code>。</p><p>这里就用别人的图片了，因为我已经创建过了。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/skfs62cm.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/7zhe6pyc.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/yqj7k14d.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/hry8d5up.png"></p><p>这里可能要等两三分钟，因为部署需要时间。</p><p>点击图中 <code>https://xxx.github.io/</code> 即可浏览到页面。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/9sbfs95u.png"></p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>在电脑中选一个合适的位置创建一个文件夹，命名为 Blog，Hexo 框架和以后自己发布的网页都在这个文件夹中。创建好后，用<strong>管理员方式</strong>打开终端，并 <code>cd</code> 到这个文件夹。<strong>（文章中所有命令都要在有管理员权限的终端下运行）</strong></p><p>输入命令 <code>npm install -g hexo-cli</code> 安装 Hexo。</p><p>安装完成后，用以下命令初始化并检测网站雏形：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo init  // 初始化<br>hexo g  // 生成静态文件<br>hexo s  // 启动服务预览<br></code></pre></td></tr></table></figure><p>注意 <code>//</code> 不要打上去了。</p><p>等待出现 <code>Hexo is running at http://localhost:4000</code> 就说明你完成了第一步。在浏览器中输入 <code>http://localhost:4000/</code> 即可看到你的博客页面。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/balzs66k.png"></p><h2 id="变更主题"><a href="#变更主题" class="headerlink" title="变更主题"></a>变更主题</h2><p>可以在 <a href="https://hexo.io/themes/index.html">https://hexo.io/themes/index.html</a> 进行主题的挑选更换。</p><p>我推荐 <code>Fluid</code> 主题 <a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a>。按照 GitHub 上的步骤做即可。</p><p>在终端中运行以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo clean<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>再刷新 <code>http://localhost:4000/</code> 网址，即可看到新的主题页面。</p><p>更换语言：通过修改 Blog 中的<strong>站点配置</strong>文件 <code>_config.yml</code> 中的 language，中文 <code>zh-CN</code>，英文 <code>en</code>。</p><h2 id="更换主题配置"><a href="#更换主题配置" class="headerlink" title="更换主题配置"></a>更换主题配置</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/vxjvllfu.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/6577iv86.png"></p><h2 id="配置-SSH-Key"><a href="#配置-SSH-Key" class="headerlink" title="配置 SSH Key"></a>配置 SSH Key</h2><p>为了避免每次上传都要输入用户名和密码，我们将使用 SSH 免密登录。</p><p>鼠标右击打开 <code>Git Bash</code>。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/6lza66z4.png"></p><p>若还没有 user.name 和 user.email，先配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;你的GitHub用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>建议将分支改为 <code>main</code>：</p><p>在 <code>C:\Users\admin</code> 中用记事本打开 <code>.gitconfig</code>，加一条</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[init]</span><br><span class="hljs-attr">defaultBranch</span> = main<br></code></pre></td></tr></table></figure><p>生成 ssh 密钥文件：</p><p>在 git bash 中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>然后连续三个回车，默认不需要设置密码，然后找到生成的 <code>C:\Users\admin\.ssh</code> 文件夹中的 <code>id_rsa.pub</code> 密钥，将内容全部复制。</p><p>找到 Github Setting keys 页面，新建 new SSH Key。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/f66sjhrb.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ehmfgls3.png"></p><p>标题随意填，将刚复制的 <code>id_rsa.pub</code> 密钥粘贴到 Key 中，最后 Add SSH key。</p><h2 id="配置评论"><a href="#配置评论" class="headerlink" title="配置评论"></a>配置评论</h2><p>我推荐使用 Gisgus。</p><p>可以参考这里 <a href="https://blog.csdn.net/sinat_41212418/article/details/137819858">https://blog.csdn.net/sinat_41212418/article/details/137819858</a>。</p><h2 id="连接-Hexo-与-GitHub"><a href="#连接-Hexo-与-GitHub" class="headerlink" title="连接 Hexo 与 GitHub"></a>连接 Hexo 与 GitHub</h2><p>获取 ssh 地址：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/s2dz53wx.png"></p><p>打开Blog文件中的 <code>_config.yml</code> 即<strong>站点配置</strong>文件，翻到最后修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">刚获取的ssh地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">https://xxx.github.io/</span> <span class="hljs-comment">#这里的 xxx 是你的GitHub用户名</span><br></code></pre></td></tr></table></figure><p>然后保存。</p><p>最后安装 Git 部署插件：（在 blog 根目录终端下执行，而不是在 git bash 里）。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>这时再输入以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo clean<br>hexo g<br>hexo d //部署到服务上<br></code></pre></td></tr></table></figure><p>将代码推送到 git 上，再然后<strong>过几分钟</strong>访问 <code>https://xxx.github.io/</code>，就能看到部署好的主题页面了。</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>在 Blog 中打开终端命令行输入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo new &quot;你的文章标题名&quot;<br></code></pre></td></tr></table></figure><p>接着在 <code>\Blog\source\_posts</code> 文件夹中就能看到新建的 markdown 文件，编辑好后重新执行 <code>hexo clean</code> <code>hexo g</code> <code>hexo d</code> 命令就 ok 了。</p><h2 id="AD"><a href="#AD" class="headerlink" title="AD"></a>AD</h2><p>我的 Blog：<a href="https://lijingshu-304775.github.io/">https://lijingshu-304775.github.io</a>，欢迎交换友链。</p>]]></content>
    
    
    <categories>
      
      <category>科技·工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P2119题解</title>
    <link href="/2025/07/01/%E6%B4%9B%E8%B0%B7P2119%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/01/%E6%B4%9B%E8%B0%B7P2119%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>原题链接：<a href="https://www.luogu.com.cn/problem/P2119">https://www.luogu.com.cn/problem/P2119</a>。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题目要求我们找到满足特定条件的四个魔法物品，称为魔法阵。</p><p>魔法阵具体条件是：</p><ol><li><p>四个物品的魔法值严格递增：$X_a &lt; X_b &lt; X_c &lt; X_d$。</p></li><li><p>$X_b - X_a &#x3D; 2 \times (X_d - X_c)$。</p></li><li><p>$X_b - X_a &lt; (X_c - X_b) &#x2F; 3$。</p></li></ol><p>首先统计每个魔法值出现的次数，这样可以方便后续的计算。</p><p>再遍历可能的 $t$：对于每个可能的 $t$，使得 $9\times t &lt; n - 1$。这个 $t$ 是一个关键参数，用于确定四元组的范围。</p><p>然后遍历可能的 $a$：对于每个 $a$，使得 $a \times 9 \times t + 1 &lt; n$。这个 $a$ 是四元组中的最小值。</p><p>最后统计满足条件的四元组，在内层循环中，统计满足条件的四元组数量，并更新答案数组。</p><p>用这样的思路，这道题写代码就非常简单了。</p><p>下面是按照上面的步骤写出的代码。</p><h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n, m, cnt[<span class="hljs-number">16000</span>], x[<span class="hljs-number">41000</span>], ans[<span class="hljs-number">40000</span>][<span class="hljs-number">5</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= m;i++)&#123;<br>cin &gt;&gt; x[i];<br>cnt[x[i]]++; <span class="hljs-comment">// 统计每个魔法值出现的次数</span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<span class="hljs-number">9</span> * t &lt;= n;t++)&#123; <span class="hljs-comment">// 遍历可能的 t</span><br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>, a, b, c, d;<br><span class="hljs-keyword">for</span>(a = n - <span class="hljs-number">9</span> * t - <span class="hljs-number">1</span>;a &gt; <span class="hljs-number">0</span>;a--)&#123; <span class="hljs-comment">// 遍历可能的 a</span><br>b = a + <span class="hljs-number">2</span> * t; <span class="hljs-comment">// 计算对应的 b</span><br>c = a + <span class="hljs-number">8</span> * t + <span class="hljs-number">1</span>; <span class="hljs-comment">// 计算对应的 c</span><br>d = a + <span class="hljs-number">9</span> * t + <span class="hljs-number">1</span>; <span class="hljs-comment">// 计算对应的 d</span><br>res += cnt[c] * cnt[d]; <span class="hljs-comment">// 统计满足条件的四元组数量</span><br>ans[a][<span class="hljs-number">0</span>] += cnt[b] * res; <span class="hljs-comment">// 更新答案</span><br>ans[b][<span class="hljs-number">1</span>] += cnt[a] * res; <span class="hljs-comment">// 更新答案</span><br>&#125;<br>res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(d = <span class="hljs-number">9</span> * t + <span class="hljs-number">2</span>;d &lt;= n;d++)&#123; <span class="hljs-comment">// 第二次操作，同上</span><br>a = d - <span class="hljs-number">9</span> * t - <span class="hljs-number">1</span>; <br>b = d - <span class="hljs-number">7</span> * t - <span class="hljs-number">1</span>;<br>c = d - t;<br>res += cnt[a] * cnt[b];<br>ans[c][<span class="hljs-number">2</span>] += cnt[d] * res;<br>ans[d][<span class="hljs-number">3</span>] += cnt[c] * res;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= m;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; <span class="hljs-number">4</span>;j++)&#123;<br>cout &lt;&lt; ans[x[i]][j] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>AC 记录：<a href="https://www.luogu.com.cn/record/218437099">https://www.luogu.com.cn/record/218437099</a>。</p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NOIP普及组</tag>
      
      <tag>枚举</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P1217题解</title>
    <link href="/2025/07/01/%E6%B4%9B%E8%B0%B7P1217%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/01/%E6%B4%9B%E8%B0%B7P1217%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>这道题没什么思维难度，<del>建议降红</del>，本题目可以拆分成两个步骤。</p><ol><li><p>判断质数。</p></li><li><p>判断回文数。</p></li></ol><p>判断质数的代码很简单，从 $2$ 枚举到 $\sqrt x$，判断每一个 $i$ 是否能被 $x$ 整除，如可以返回一，否则返回零，可以得到如下代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isprime</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i * i &lt;= x;i++)&#123;<br>        <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断回文数的代码也很简单，你可以用 to_string 函数将整数 $x$ 转成字符串，用一个字符串存下来。然后可以使用 reverse 函数反转字符串，最后判断两个字符串是否相等就可以了。</p><p>注意，在这里需要引用 cstring 头文件。</p><p>最后的最后我们还需一个 for 循环枚举 $a$ 和 $b$ 之间的所有整数，依次判断是否是回文质数，满足条件就输出。</p><p>完整代码就不给了。希望这篇题解对你有所帮助。</p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>USACO</tag>
      
      <tag>素数筛</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
